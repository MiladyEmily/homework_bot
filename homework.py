import time
import sys
import logging
from logging import StreamHandler
from http import HTTPStatus
from typing import Any, List, Union

import telegram
import requests

from exceptions import NoEnvVariable, StatusNot200
from settings import (RETRY_PERIOD, ENDPOINT, PRACTICUM_TOKEN,
                      TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, HEADERS,
                      HOMEWORKS_NUMBER)


HOMEWORK_VERDICTS = {
    'approved': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —Ä–µ–≤—å—é–µ—Ä—É –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –£—Ä–∞!',
    'reviewing': '–†–∞–±–æ—Ç–∞ –≤–∑—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≤—å—é–µ—Ä–æ–º.',
    'rejected': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —É —Ä–µ–≤—å—é–µ—Ä–∞ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è.'
}
HOMEWORK_KEYS = ['status',
                 'homework_name']


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = StreamHandler(stream=sys.stdout)
formatter = logging.Formatter(
    '%(asctime)s %(levelname)s: %(message)s'
)
handler.setFormatter(formatter)
logger.addHandler(handler)


def type_check(text: str, variable: Any, type_: type) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ —Ç–æ–≥–æ —Ç–∏–ø–∞."""
    if not isinstance(variable, type_):
        raise TypeError(text)


def value_check(item: str, list_: List[str]) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –∫–ª—é—á–∞."""
    if item not in list_:
        text = f'–ö–ª—é—á–∞ {item} –Ω–µ—Ç –≤ {list_}'
        raise KeyError(text)


def check_tokens() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    invisible_vars = ''
    env_vars = {
        'PRACTICUM_TOKEN ': PRACTICUM_TOKEN,
        'TELEGRAM_TOKEN ': TELEGRAM_TOKEN,
        'TELEGRAM_CHAT_ID ': TELEGRAM_CHAT_ID,
    }
    for key, var in env_vars.items():
        if not var:
            invisible_vars += key
    if invisible_vars != '':
        logging.critical(('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:'
                          f' {invisible_vars}. '
                          '–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.'))
        raise NoEnvVariable(('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è'
                            f' –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {invisible_vars}'))


def send_message(bot: telegram.bot.Bot, message: str) -> Union[bool, None]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç."""
    try:
        bot.send_message(TELEGRAM_CHAT_ID, message)
        logging.debug(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}')
        return True
    except Exception as error:
        logging.error(f'–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message} –≤ —á–∞—Ç: {error}')


def get_api_answer(timestamp: float) -> Union[None, dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –Ø–Ω–¥–µ–∫—Å.–î–æ–º–∞—à–∫–∏."""
    try:
        payload = {'from_date': timestamp}
        homework_statuses = requests.get(ENDPOINT,
                                         headers=HEADERS,
                                         params=payload)
        status = homework_statuses.status_code
        if status != HTTPStatus.OK:
            raise StatusNot200(f'–°—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ API –Ω–µ 200, a {status}')
        return homework_statuses.json()
    except requests.RequestException:
        logging.error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API')


def check_response(response: dict) -> Union[dict, None]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    type_check('–æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ - –Ω–µ —Å–ª–æ–≤–∞—Ä—å', response, dict)
    value_check('current_date', response.keys())
    value_check('homeworks', response.keys())
    type_check('current_date - –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ',
               response['current_date'],
               int)
    type_check('homeworks - –Ω–µ —Å–ø–∏—Å–æ–∫', response['homeworks'], list)
    if not response['homeworks']:
        logging.debug('–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç')
        return None
    homeworks = response['homeworks']
    current_homework = homeworks[0]
    type_check('—ç–ª–µ–º–µ–Ω—Ç homeworks - –Ω–µ —Å–ª–æ–≤–∞—Ä—å', current_homework, dict)
    return current_homework


def parse_status(homework: dict) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    for item in HOMEWORK_KEYS:
        value_check(item, homework.keys())
    status = homework['status']
    if status not in HOMEWORK_VERDICTS.keys():
        text = f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å {status}'
        raise ValueError(text)
    homework_name = homework['homework_name']
    verdict = HOMEWORK_VERDICTS[status]
    return f'–ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã "{homework_name}". {verdict}'


def check_in_process(bot: telegram.bot.Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –∫—É—Ä—Å–µ."""
    response = get_api_answer(0)
    if len(response['homeworks']) == HOMEWORKS_NUMBER:
        send_message(bot, 'üéâü•Ç–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å!üòçüéä')
        return False
    return True


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    bot = telegram.Bot(token=TELEGRAM_TOKEN)
    timestamp = int(time.time())
    last_message = ['']
    send_message(bot, ('–ü—Ä–∏–≤–µ—Ç! –Ø Homework_Bot –∏ –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å '
                       '—Å—Ç–∞—Ç—É—Å —Ç–≤–æ–µ–π –¥–æ–º–∞—à–∫–∏ –Ω–∞ –ü—Ä–∞–∫—Ç–∏–∫—É–º–µ :)'))
    bot_working = True
    while bot_working:
        check_tokens()
        try:
            response = get_api_answer(timestamp)
            homework = check_response(response)
            if homework:
                message = parse_status(homework)
                send_message(bot, message)
                last_message[0] = message
                if homework['status'] == 'approved':
                    bot_working = check_in_process(bot)
            timestamp = response['current_date']
        except Exception as error:
            message = f'–°–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {error}'
            if send_message(bot, message):
                last_message[0] = message
        finally:
            time.sleep(RETRY_PERIOD)


if __name__ == '__main__':
    logging.basicConfig(
        level=logging.DEBUG,
        filename='main.log',
        filemode='w',
        format='%(asctime)s %(levelname)s: %(message)s'
    )
    try:
        main()
    except KeyboardInterrupt:
        bot = telegram.Bot(token=TELEGRAM_TOKEN)
        send_message(bot, '–Ø –≤—ã–∫–ª—é—á–∞—é—Å—å. –ù–æ —Å–∫–æ—Ä–æ —Å–Ω–æ–≤–∞ –±—É–¥—É —Å —Ç–æ–±–æ–π!')
